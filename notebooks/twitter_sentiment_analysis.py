# -*- coding: utf-8 -*-
"""Twitter_sentiment _analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c01FknzRZ6SA7OufGCNjDP5mpujydZjV
"""

!mkdir -p ~./kaggle
!cp kaggle.json ~./kaggle/
!chmod 600 ~./kaggle/kaggle.json

"""Imorting Twitter sentiment dataset"""

!kaggle datasets download -d kazanova/sentiment140

"""Extracting the compressed dataset"""

from zipfile import ZipFile
dtset_pth = '/content/sentiment140.zip'
with ZipFile(dtset_pth, 'r') as zip:
  zip.extractall()
  print("The dataset is extracted")

"""Importing the dependencies"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

"""Dataprocessing"""

clmn = ['target','id','date','flag','user','text']
twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv',names = clmn, encoding = 'ISO-8859-1')
twitter_data.head()

twitter_data.replace({'target':{4:1}}, inplace = True)

"""**Stemming**"""

pattern =re.compile('[^a-zA-Z]')

english_stopwords = stopwords.words('english')

port_stemmer = PorterStemmer()


def stemming(content):
      stemmed_content = re.sub(pattern,' ',content)
      stemmed_content = stemmed_content.lower()
      stemmed_content = stemmed_content.split()
      stemmed_content = [port_stemmer.stem(word) for word in stemmed_content if not word in english_stopwords]
      stemmed_content = ' '.join(stemmed_content)

      return stemmed_content

twitter_data['stemmed_content'] = twitter_data['text'].apply(stemming)

twitter_data.head()

print(twitter_data['stemmed_content'])

print(twitter_data['target'])

"""Seperating data and label"""

X = twitter_data['stemmed_content'].values
Y = twitter_data['target'].values

"""Splitting data to training data and testing data"""

X_train, X_test, Y_train, Y_test  = train_test_split(X,Y,test_size = 0.2,stratify = Y,random_state = 2)

vectorizer = TfidfVectorizer()

X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

print(X_train)

"""Training the machine learning model

Logistic regression
"""

model = LogisticRegression(max_iter = 1000)

model.fit(X_train,Y_train)

"""Model Evaluation



Accuracy Score
"""

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train,X_train_prediction)

print('Accuracy score on the training data: ',training_data_accuracy)

X_test_prediction = model.predict(X_test)
training_data_accuracy = accuracy_score(Y_test,X_test_prediction)

print('Accuracy score on the test data: ',training_data_accuracy)

"""Saving the trained model"""

import pickle

filename = 'trained_model.sav'
pickle.dump(model,open(filename,'wb'))

"""Using saved model for future predictions"""

#Loading the saved model
loaded_model = pickle.load(open('/content/trained_model.sav', 'rb'))

import random
import matplotlib.pyplot as plt

pos = 0
neg = 0
iterations = 10

for i in range(iterations):
    k = random.randint(0, 10000)
    X_new = X_test[k]
    prediction = loaded_model.predict(X_new)
    if prediction[0] == 0:
        neg += 1
    else:
        pos += 1

# Calculate percentages
pos_percentage = (pos / iterations) * 100
neg_percentage = (neg / iterations) * 100

# Data for plotting
categories = ['Positive', 'Negative']
percentages = [pos_percentage, neg_percentage]

# Plotting the bar chart
plt.bar(categories, percentages, color=['green', 'red'])
plt.xlabel('Analysis')
plt.ylabel('Percentage (%)')
plt.title('Percentage of Positive tweets vs Negative Tweets')
plt.show()

# Print the percentages
print(f'Positive: {pos_percentage:.2f}%')
print(f'Negative: {neg_percentage:.2f}%')

